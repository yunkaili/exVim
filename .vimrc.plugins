" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" let Vundle manage Vundle, required
" ---------------------------------------------------
Plugin 'VundleVim/Vundle.vim'

"}}}

" general plugins {{{

" ex-config:
" ---------------------------------------------------
Plugin 'exvim/ex-config'
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

" ex-utility:
" ---------------------------------------------------
Plugin 'exvim/ex-utility'

nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

" ex-vimentry
" ---------------------------------------------------
Plugin 'exvim/ex-vimentry'

" ex-project
" ---------------------------------------------------
Plugin 'exvim/ex-project'

" ex-gsearch
" ---------------------------------------------------
Plugin 'exvim/ex-gsearch'

call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

" ex-tagselect
" ---------------------------------------------------
Plugin 'exvim/ex-tags'

call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
" DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

" ex-symbol
" ---------------------------------------------------
Plugin 'exvim/ex-symbol'

call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

if has('gui_running')
    if has ('mac')
        call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    else
        call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    endif
endif
let g:ex_symbol_select_cmd = 'TS'

" ex-cscope
" ---------------------------------------------------
Plugin 'exvim/ex-cscope'

call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )

" ex-qfix
" ---------------------------------------------------
Plugin 'exvim/ex-qfix'

call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )

" ex-hierarchy
" ---------------------------------------------------
Plugin 'exvim/ex-hierarchy'

nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

" majutsushi/tagbar
" ---------------------------------------------------
Plugin 'majutsushi/tagbar'

nnoremap <unique> <silent> <F4> :TagbarToggle<CR>

" if ctags bin exist"
" let g:tagbar_ctags_bin = ''

let g:tagbar_sort = 1
let g:tagbar_map_preview = '<CR>'
if has('gui_running')
    let g:tagbar_map_close = '<Esc>'
else
    let g:tagbar_map_close = '<leader><Esc>'
endif
let g:tagbar_map_zoomwin = '<Space>'
let g:tagbar_zoomwidth = 80
let g:tagbar_autofocus = 1
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_compact = 1

" use command ':TagbarGetTypeConfig lang' change your settings
let g:tagbar_type_javascript = {
    \ 'ctagsbin': 'ctags',
    \ 'kinds' : [
        \ 'v:global variables:0:0',
        \ 'c:classes',
        \ 'p:properties:0:0',
        \ 'm:methods',
        \ 'f:functions',
        \ 'r:object',
    \ ],
\ }
let g:tagbar_type_c = {
    \ 'kinds' : [
        \ 'd:macros:0:0',
        \ 'p:prototypes:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 's:structs',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
        \ 'f:functions',
    \ ],
\ }
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:0:0',
        \ 'p:prototypes:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
    \ ],
\ }

" matchit.zip: invoke by %
" ---------------------------------------------------
Plugin 'vim-scripts/matchit.zip'

" SearchComplete: invoke by /
" ---------------------------------------------------
Plugin 'vim-scripts/SearchComplete'

" vim-colorschemes
" ---------------------------------------------------
" Plugin 'flazz/vim-colorschemes'

" sentientmachine/Pretty-Vim-Python
" ---------------------------------------------------
Plugin 'sentientmachine/Pretty-Vim-Python'


" dracula/vim
" ---------------------------------------------------
Plugin 'dracula/vim', { 'as': 'dracula' }

" cctree
" ---------------------------------------------------
Plugin 'hari-rangarajan/CCTree'

" auto-close
" ---------------------------------------------------
Plugin 'spf13/vim-autoclose'
let g:autoclose_vim_commentmode = 1

" vim-airline-themes
" ---------------------------------------------------
Plugin 'vim-airline/vim-airline-themes'
let g:airline_theme='dracula'

" DISABLE: vim-airline makes Vim editing slow when there are too many buffers opened
"          if you don't mind, and love this plugin, uncomment the script below
"          to enable it

" vim-airline
" ---------------------------------------------------
Plugin 'vim-airline/vim-airline'

if has('gui_running')
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 0
endif

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''


let g:airline_inactive_collapse=1
let g:airline#extensions#tabline#enabled = 1 " NOTE: When you open lots of buffers and typing text, it is so slow.
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_section_a = airline#section#create(['mode'])
let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
let g:airline_section_c = '%t'

" ctrlp: invoke by <ctrl-p>
" ---------------------------------------------------
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
nnoremap <unique> <leader>bs :CtrlPBuffer<CR>

" vim-fugitive: invoke most by :Gdiff
" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" vim-surround: invoke when you select words and press 's'
" ---------------------------------------------------
Plugin 'tpope/vim-surround'

xmap s <Plug>VSurround

" DISABLE
" " Plugin 'tpope/vim-dispatch'
" " ---------------------------------------------------

" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'
let g:NERDTreeShowBookmarks=1
let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let g:NERDTreeChDirMode=0
let g:NERDTreeQuitOnOpen=1
let g:NERDTreeShowHidden=1
let g:NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plugin 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
" map <unique> <F11> <Plug>NERDCommenterAlignBoth
" map <unique> <C-F11> <Plug>NERDCommenterUncomment

" syntastic: invoke when you save file and have syntac-checker
" ---------------------------------------------------
Plugin 'scrooloose/syntastic'

" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 2
let g:syntastic_check_on_wq = 1
let g:syntastic_python_python_exec = 'python3'
let g:syntastic_python_pylint3_args = '--rcfile=/home/liyunkai/.pylintrc'
" let g:syntastic_python_checkers = ['autopep8', 'pylint']
let g:syntastic_python_checkers = ['autopep8']


" vim-pydocstring
" ---------------------------------------------------
Plugin 'heavenshell/vim-pydocstring'

nmap <silent> <C-_> <Plug>(pydocstring)

" DISABLE
" if using ex-autocomplpop,
" close SirVer/ultisnips, honza/vim-snippets, Valloric/YouCompleteMe
" ex-autocomplpop: invoke when you input text
" ---------------------------------------------------
"  Plugin 'exvim/ex-autocomplpop'

" SirVer/ultisnips
" ---------------------------------------------------
" Plugin 'SirVer/ultisnips'
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<c-n>"
" let g:UltiSnipsJumpForwardTrigger="<c-n>"
" let g:UltiSnipsJumpBackwardTrigger="<c-p>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

" honza/vim-snippets
" ---------------------------------------------------
" Plugin 'honza/vim-snippets'

" YouCompleteMe
" ---------------------------------------------------
Plugin 'Valloric/YouCompleteMe'

let g:acp_enableAtStartup = 1

nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
" invoke omni completion by pressing ctrl+/ (ctrl+/ is recognized as C-_)
inoremap <unique> <C-_> <C-X><C-O><C-P>

" enable completion from tags
let g:ycm_complete_in_comments=1
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_global_ycm_extra_conf = '/home/ykli/.exvim/ycm_extra_conf.py'

" Ways to compuile YouCompleteMe
" 1. Download LLVM and CLANG (v3.9 and higher)  [url]http://llvm.org/releases/download.html
" download both llvm source code and clang source code

" 2. Download and install Vim (v7.4.143 or higher and compile with Python(done with configure)) [url]https://github.com/vim/vim.git
" ./configure --enable-pythoninterp  --with-python-config-dir=/home/liyunkai/local/anaconda2/lib/python2.7/config --prefix=/to/your/path

" 3. Download and install Cmake (v3.7 or higher) [url]https://cmake.org/files/v3.7/cmake-3.7.0.tar.gz
" if (CMake Error: Could not find CMAKE_ROOT) happens
" add
" export CMAKE_ROOT=$HOME/local/share/cmake-3.7
" in .bashrc or .zshrc

" Compile LLVM and CLANG and put them in to a same file

" Run Commands below
" cd ~
" mkdir ycm_build
" cd ycm_build
" cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=/home/liyunkai/local/llvm+clang/ -DEXTERNAL_LIBCLANG_PATH=/home/liyunkai/local/llvm+clang/lib/libclang.so . ~/.exvim/vimfiles/bundle/YouCompleteMe/third_party/ycmd/cpp
" cmake -G "Unix Makefiles" -DPATH_TO_LLVM_ROOT=/home/liyunkai/local/ -DEXTERNAL_LIBCLANG_PATH=/home/liyunkai/local/lib/libclang.so -DPYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.so -DPYTHON_INCLUDE_DIR=$(python-config --prefix)/include/python2.7 . ~/.exvim/vimfiles/bundle/YouCompleteMe/third_party/ycmd/cpp
" cmake --build . --target ycm_core --config Release

" MODIFY files in /home/liyunkai/.exvim/vimfiles/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py

" remap Ultisnips for compatibility for YCM
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" Haskell post write lint and check with ghcmod
" $ `cabal install ghcmod` if missing and ensure
" ~/.cabal/bin is in your $PATH.
if !executable("ghcmod")
    autocmd BufWritePost *.hs GhcModCheckAndLintAsync
endif

" Disable the neosnippet preview candidate window
" When enabled, there can be too much visual noise
" especially when splits are used.
" set completeopt-=preview


" 'vim-python/python-syntax'
" ---------------------------------------------------
" Plugin 'vim-python/python-syntax'
" " Highlight builtin functions and objects
" let g:python_highlight_builtins=1
" " Highlight builtin objects only
" let g:python_highlight_builtin_objs=1
" " Highlight builtin functions only
" let g:python_highlight_builtin_funcs=1
" " Highlight standard exceptions
" let g:python_highlight_exceptions=1
" " Highlight % string formatting
" let g:python_highlight_string_formatting=1
" " Highlight syntax of str.format syntax
" let g:python_highlight_string_format=1
" " Highlight syntax of string.Template
" let g:python_highlight_string_templates=1
" " Highlight indentation errors
" let g:python_highlight_indent_errors=1
" " Highlight trailing spaces
" let g:python_highlight_space_errors=1
" " Highlight doc-tests
" let g:python_highlight_doctests=1
" " Highlight class variables self and cls
" let g:python_highlight_class_vars=1
" " Highlight all operators
" let g:python_highlight_operators=1
" " Enable all highlight options above, except for previously set.
" let g:python_highlight_all=1
" " Highlight shebang and coding headers as comments
" let g:python_highlight_file_headers_as_comments=1

Plugin 'wmayner/python3-syntax'

" TODO: choose a snippet plugin
" Plugin 'Shougo/neosnippet.vim'
" " ---------------------------------------------------

" Plugin 'msanders/snipmate.vim'
" " ---------------------------------------------------

" Plugin 'spf13/snipmate-snippets'
" " ---------------------------------------------------

" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plugin 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" tabular: invoke by <leader>= alignment-character
" ---------------------------------------------------
Plugin 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>


" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
Plugin 'easymotion/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" LargeFile
" ---------------------------------------------------
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

"}}}

" DISABLE: I'm using GistBox https://app.gistboxapp.com/ instead
" " gist-vim: Invoke by :Gist
" ---------------------------------------------------
" Plugin 'mattn/webapi-vim'
" Plugin 'mattn/gist-vim'

" c-lang {{{

" ex-cref: invoke by <leader>cr
" ---------------------------------------------------
Plugin 'exvim/ex-cref'

" this is modified for default c syntax highlight settings
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

"}}}

" web {{{

Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>

" ex-typescript
" ---------------------------------------------------
Plugin 'exvim/ex-typescript'

" emmet-vim
" ---------------------------------------------------
Plugin 'mattn/emmet-vim'

" make sure emmet only enable in html,css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" DISABLE:
" " vim-indent-guides: invoke by <leader>ig
" " ---------------------------------------------------
" Plugin 'nathanaelkane/vim-indent-guides'
" let g:indent_guides_guide_size = 1

" Yggdroot/indentLine: invoke by <leader>ig
" ---------------------------------------------------
"Plugin 'Yggdroot/indentLine'
"nnoremap <unique> <leader>ig :IndentLinesToggle<CR>
"let g:indentLine_showFirstIndentLevel = 0
"let g:indentLine_enabled = 1
"let g:indentLine_char = '┆'
"let g:indentLine_color_term = 239

" vim-markdown
" ---------------------------------------------------
" Plugin 'plasticboy/vim-markdown'
" let g:vim_markdown_initial_foldlevel=9999

"}}}

" TEST {{{
" " test-loading
" echomsg "test-loading: .vimrc"
" Plugin 'exvim/test-loading'
"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
